// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Set = require("bs-platform/lib/js/set.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Int32 = require("bs-platform/lib/js/int32.js");
var Stream = require("bs-platform/lib/js/stream.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var IntSet = $$Set.Make([Int32.compare]);

function inputLines(param) {
  return $$Array.to_list(Fs.readFileSync("resources/one.txt", "utf8").split("\n"));
}

function lineToOperation(line) {
  var match = Caml_string.get(line, 0) === /* "+" */43;
  if (match) {
    return /* Positive */0;
  } else {
    return /* Negative */1;
  }
}

function lineToAmount(line) {
  var rangeEnd = line.length;
  return Caml_format.caml_int32_of_string($$String.sub(line, 1, rangeEnd - 1 | 0));
}

function lineToFrequencyChange(line) {
  return /* tuple */[
          lineToOperation(line),
          lineToAmount(line)
        ];
}

function applyFrequencyChange(total, change) {
  if (change[0]) {
    return total - change[1] | 0;
  } else {
    return total + change[1] | 0;
  }
}

function circularStream(l) {
  var length = List.length(l);
  return Stream.from((function (i) {
                return Js_primitive.some(List.nth(l, Caml_int32.mod_(i, length)));
              }));
}

function findFirstRepeatFrequency(l) {
  var changes = circularStream(l);
  var knownFrequencies = IntSet[/* empty */0];
  var frequency = Int32.zero;
  var $$break = false;
  while(!$$break) {
    frequency = applyFrequencyChange(frequency, Stream.next(changes));
    if (Curry._2(IntSet[/* mem */2], frequency, knownFrequencies)) {
      $$break = true;
    } else {
      knownFrequencies = Curry._2(IntSet[/* add */3], frequency, knownFrequencies);
    }
  };
  return frequency;
}

function firstSolution(param) {
  return List.fold_left(applyFrequencyChange, Int32.zero, List.map(lineToFrequencyChange, inputLines(/* () */0)));
}

function secondSolution(param) {
  return findFirstRepeatFrequency(List.map(lineToFrequencyChange, inputLines(/* () */0)));
}

exports.IntSet = IntSet;
exports.inputLines = inputLines;
exports.lineToOperation = lineToOperation;
exports.lineToAmount = lineToAmount;
exports.lineToFrequencyChange = lineToFrequencyChange;
exports.applyFrequencyChange = applyFrequencyChange;
exports.circularStream = circularStream;
exports.findFirstRepeatFrequency = findFirstRepeatFrequency;
exports.firstSolution = firstSolution;
exports.secondSolution = secondSolution;
/* IntSet Not a pure module */
