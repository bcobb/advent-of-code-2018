// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function input(param) {
  return Fs.readFileSync("resources/five.txt", "utf8");
}

function array_of_string(source) {
  return $$Array.init(source.length, (function (param) {
                return Caml_string.get(source, param);
              }));
}

function shouldReact(a, b) {
  if (Char.lowercase(a) === Char.lowercase(b)) {
    return a !== b;
  } else {
    return false;
  }
}

function reactOnce(source) {
  return $$Array.fold_left((function (result, character) {
                var lastIndex = result.length - 1 | 0;
                if (lastIndex >= 0) {
                  var lastCharacter = Caml_string.get(result, lastIndex);
                  if (shouldReact(lastCharacter, character)) {
                    return $$String.sub(result, 0, lastIndex);
                  } else {
                    return result + $$String.make(1, character);
                  }
                } else {
                  return result + $$String.make(1, character);
                }
              }), "", array_of_string(source));
}

function react(source) {
  var origin = source;
  var reaction = reactOnce(source);
  while(reaction !== origin) {
    origin = reaction;
    reaction = reactOnce(origin);
  };
  return reaction;
}

function firstAnswer(param) {
  console.log(react(Fs.readFileSync("resources/five.txt", "utf8")).length);
  return /* () */0;
}

function secondAnswer(param) {
  var basePolymer = Fs.readFileSync("resources/five.txt", "utf8");
  var unitsToTryRemoving_000 = (/a/ig);
  var unitsToTryRemoving_001 = /* :: */[
    (/b/ig),
    /* :: */[
      (/c/ig),
      /* :: */[
        (/d/ig),
        /* :: */[
          (/e/ig),
          /* :: */[
            (/f/ig),
            /* :: */[
              (/g/ig),
              /* :: */[
                (/h/ig),
                /* :: */[
                  (/i/ig),
                  /* :: */[
                    (/j/ig),
                    /* :: */[
                      (/k/ig),
                      /* :: */[
                        (/l/ig),
                        /* :: */[
                          (/m/ig),
                          /* :: */[
                            (/n/ig),
                            /* :: */[
                              (/o/ig),
                              /* :: */[
                                (/p/ig),
                                /* :: */[
                                  (/q/ig),
                                  /* :: */[
                                    (/r/ig),
                                    /* :: */[
                                      (/s/ig),
                                      /* :: */[
                                        (/t/ig),
                                        /* :: */[
                                          (/u/ig),
                                          /* :: */[
                                            (/v/ig),
                                            /* :: */[
                                              (/w/ig),
                                              /* :: */[
                                                (/x/ig),
                                                /* :: */[
                                                  (/y/ig),
                                                  /* :: */[
                                                    (/z/ig),
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var unitsToTryRemoving = /* :: */[
    unitsToTryRemoving_000,
    unitsToTryRemoving_001
  ];
  console.log(List.hd(List.sort(Caml_obj.caml_compare, List.map((function (re) {
                      return react(basePolymer.replace(re, "")).length;
                    }), unitsToTryRemoving))));
  return /* () */0;
}

exports.input = input;
exports.array_of_string = array_of_string;
exports.shouldReact = shouldReact;
exports.reactOnce = reactOnce;
exports.react = react;
exports.firstAnswer = firstAnswer;
exports.secondAnswer = secondAnswer;
/* fs Not a pure module */
