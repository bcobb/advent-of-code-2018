// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Map = require("bs-platform/lib/js/map.js");
var Char = require("bs-platform/lib/js/char.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var CharMap = $$Map.Make([Char.compare]);

function inputLines(param) {
  return $$Array.to_list(Fs.readFileSync("resources/two.txt", "utf8").split("\n"));
}

function arrayFromString(s) {
  return $$Array.init(s.length, (function (param) {
                return Caml_string.get(s, param);
              }));
}

function characterHistogram(arrayOfChars) {
  return $$Array.fold_left((function (map, aChar) {
                var exit = 0;
                var item;
                try {
                  item = Curry._2(CharMap[/* find */21], aChar, map);
                  exit = 1;
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    return Curry._3(CharMap[/* add */3], aChar, 1, map);
                  } else {
                    throw exn;
                  }
                }
                if (exit === 1) {
                  return Curry._3(CharMap[/* add */3], aChar, item + 1 | 0, map);
                }
                
              }), CharMap[/* empty */0], arrayOfChars);
}

function hasValue(value, map) {
  return Curry._2(CharMap[/* exists */12], (function (param, binding) {
                return Caml_obj.caml_equal(binding, value);
              }), map);
}

function boxIdHistogram(boxId) {
  return characterHistogram(arrayFromString(boxId));
}

function checksum(boxIds) {
  var histograms = $$Array.map(boxIdHistogram, boxIds);
  var numberOfTwos = $$Array.fold_left((function (total, histogram) {
          var match = hasValue(2, histogram);
          if (match) {
            return total + 1 | 0;
          } else {
            return total;
          }
        }), 0, histograms);
  var numberOfThrees = $$Array.fold_left((function (total, histogram) {
          var match = hasValue(3, histogram);
          if (match) {
            return total + 1 | 0;
          } else {
            return total;
          }
        }), 0, histograms);
  return Caml_int32.imul(numberOfThrees, numberOfTwos);
}

function firstSolution(param) {
  return checksum($$Array.of_list(inputLines(/* () */0)));
}

exports.CharMap = CharMap;
exports.inputLines = inputLines;
exports.arrayFromString = arrayFromString;
exports.characterHistogram = characterHistogram;
exports.hasValue = hasValue;
exports.boxIdHistogram = boxIdHistogram;
exports.checksum = checksum;
exports.firstSolution = firstSolution;
/* CharMap Not a pure module */
