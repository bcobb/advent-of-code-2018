// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Map = require("bs-platform/lib/js/map.js");
var $$Set = require("bs-platform/lib/js/set.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var compare = Caml_obj.caml_compare;

var Coordinate = /* module */[/* compare */compare];

var CoordinateMap = $$Map.Make(Coordinate);

var CoordinateSet = $$Set.Make(Coordinate);

var compare$1 = Caml_obj.caml_compare;

var IntSet = $$Set.Make(/* module */[/* compare */compare$1]);

function getX(param) {
  return param[0];
}

function getY(param) {
  return param[1];
}

function coordinates_of_string(input) {
  var matchAttempt = input.match((/(\d+), (\d+)/));
  if (matchAttempt !== null) {
    return /* tuple */[
            Caml_format.caml_int_of_string(Caml_array.caml_array_get(matchAttempt, 1)),
            Caml_format.caml_int_of_string(Caml_array.caml_array_get(matchAttempt, 2))
          ];
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function inputCoordinates(param) {
  return $$Array.to_list($$Array.map(coordinates_of_string, Fs.readFileSync("resources/six.txt", "utf8").split("\n")));
}

function boundaryCoordinates(coordinates) {
  var sortedByY = List.sort((function (param, param$1) {
          return Caml_primitive.caml_int_compare(param[1], param$1[1]);
        }), coordinates);
  var sortedByX = List.sort((function (param, param$1) {
          return Caml_primitive.caml_int_compare(param[0], param$1[0]);
        }), coordinates);
  var match = List.hd(sortedByY);
  var lowerY = match[1];
  var match$1 = List.nth(sortedByY, List.length(sortedByY) - 1 | 0);
  var upperY = match$1[1];
  var match$2 = List.hd(sortedByX);
  var lowerX = match$2[0];
  var match$3 = List.nth(sortedByX, List.length(sortedByX) - 1 | 0);
  var upperX = match$3[0];
  return List.filter((function (param) {
                  var y = param[1];
                  var x = param[0];
                  if (x === lowerX || x === upperX || y === lowerY) {
                    return true;
                  } else {
                    return y === upperY;
                  }
                }))(coordinates);
}

function rangeIn(dimension, coordinates) {
  var boundaries = boundaryCoordinates(coordinates);
  var sorted = List.sort((function (a, b) {
          return Caml_obj.caml_compare(Curry._1(dimension, a), Curry._1(dimension, b));
        }), boundaries);
  var min = Curry._1(dimension, List.hd(sorted));
  var max = Curry._1(dimension, List.nth(sorted, List.length(sorted) - 1 | 0));
  return /* tuple */[
          min,
          max
        ];
}

function distance(a, b) {
  return Pervasives.abs(a[0] - b[0] | 0) + Pervasives.abs(a[1] - b[1] | 0) | 0;
}

function inspectList(l) {
  console.log($$Array.of_list(l));
  return l;
}

function closestBy(discriminator, origin, coordinates) {
  var neighbor = List.hd(List.sort((function (a, b) {
              var aComparison = Curry._2(discriminator, origin, a);
              var bComparison = Curry._2(discriminator, origin, b);
              return Caml_obj.caml_compare(aComparison, bComparison);
            }), coordinates));
  var distanceToNearestNeighbor = distance(origin, neighbor);
  return List.filter((function (coordinate) {
                  return distance(origin, coordinate) === distanceToNearestNeighbor;
                }))(coordinates);
}

function gridWithBoundaries(minX, maxX, minY, maxY) {
  var space = /* array */[];
  for(var x = minX; x <= maxX; ++x){
    for(var y = minY; y <= maxY; ++y){
      space.push(/* tuple */[
            x,
            y
          ]);
    }
  }
  return space;
}

function firstAnswer(coordinates) {
  var boundaryCoordinates$1 = boundaryCoordinates(coordinates);
  var match = rangeIn(getX, coordinates);
  var match$1 = rangeIn(getY, coordinates);
  var space = gridWithBoundaries(match[0], match[1], match$1[0], match$1[1]);
  var coordinateAreas = $$Array.fold_left((function (map, coordinate) {
          var closest = closestBy(distance, coordinate, coordinates);
          if (closest && !closest[1]) {
            var areaOwner = closest[0];
            var exit = 0;
            var entry;
            try {
              entry = Curry._2(CoordinateMap[/* find */21], areaOwner, map);
              exit = 1;
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                return Curry._3(CoordinateMap[/* add */3], areaOwner, /* :: */[
                            coordinate,
                            /* [] */0
                          ], map);
              } else {
                throw exn;
              }
            }
            if (exit === 1) {
              return Curry._3(CoordinateMap[/* add */3], areaOwner, /* :: */[
                          coordinate,
                          entry
                        ], map);
            }
            
          } else {
            return map;
          }
        }), CoordinateMap[/* empty */0], space);
  var match$2 = List.hd(List.sort((function (param, param$1) {
              return Caml_primitive.caml_int_compare(List.length(param$1[1]), List.length(param[1]));
            }), List.filter((function (param) {
                    if (List.mem(param[0], boundaryCoordinates$1)) {
                      return false;
                    } else {
                      var areaA = param[1];
                      var areaB = boundaryCoordinates$1;
                      var axs = Curry._1(IntSet[/* of_list */25], List.map(getX, areaA));
                      var ays = Curry._1(IntSet[/* of_list */25], List.map(getY, areaA));
                      var bxs = Curry._1(IntSet[/* of_list */25], List.map(getX, areaB));
                      var bys = Curry._1(IntSet[/* of_list */25], List.map(getY, areaB));
                      if (Curry._1(IntSet[/* cardinal */18], Curry._2(IntSet[/* inter */7], axs, bxs)) === 0) {
                        return Curry._1(IntSet[/* cardinal */18], Curry._2(IntSet[/* inter */7], ays, bys)) === 0;
                      } else {
                        return false;
                      }
                    }
                  }))(Curry._1(CoordinateMap[/* bindings */16], coordinateAreas))));
  return List.length(match$2[1]);
}

function totalDistance(origin, coordinates) {
  return List.fold_left((function (total, coordinate) {
                return total + distance(origin, coordinate) | 0;
              }), 0, coordinates);
}

function secondAnswer(coordinates, maxDistance) {
  var match = rangeIn(getX, coordinates);
  var match$1 = rangeIn(getY, coordinates);
  var space = gridWithBoundaries(match[0], match[1], match$1[0], match$1[1]);
  return Curry._1(CoordinateSet[/* cardinal */18], $$Array.fold_left((function (set, gridLocation) {
                    if (totalDistance(gridLocation, coordinates) < maxDistance) {
                      return Curry._2(CoordinateSet[/* add */3], gridLocation, set);
                    } else {
                      return set;
                    }
                  }), CoordinateSet[/* empty */0], space));
}

console.log(secondAnswer(inputCoordinates(/* () */0), 10000));

exports.Coordinate = Coordinate;
exports.CoordinateMap = CoordinateMap;
exports.CoordinateSet = CoordinateSet;
exports.IntSet = IntSet;
exports.getX = getX;
exports.getY = getY;
exports.coordinates_of_string = coordinates_of_string;
exports.inputCoordinates = inputCoordinates;
exports.boundaryCoordinates = boundaryCoordinates;
exports.rangeIn = rangeIn;
exports.distance = distance;
exports.inspectList = inspectList;
exports.closestBy = closestBy;
exports.gridWithBoundaries = gridWithBoundaries;
exports.firstAnswer = firstAnswer;
exports.totalDistance = totalDistance;
exports.secondAnswer = secondAnswer;
/* CoordinateMap Not a pure module */
